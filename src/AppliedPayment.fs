namespace FSharp.Finance.Personal

open CustomerPayments

/// functions for handling received payments and calculating interest and/or charges where necessary
module AppliedPayment =

     /// an actual payment made on a particular day, optionally with charges applied, with the net effect and payment status calculated
    [<Struct>]
    type AppliedPayment = {
        /// the day the payment is made, as an offset of days from the start date
        AppliedPaymentDay: int<OffsetDay>
        /// the amount of any scheduled payment due on the current day
        ScheduledPayment: int64<Cent>
        /// the amounts of any actual payments made on the current day
        ActualPayments: int64<Cent> array
        /// a payment generated by the system e.g. to calculate a settlement figure
        GeneratedPayment: int64<Cent>
        /// details of any charges incurred on the current day
        IncurredCharges: Charge array
        /// the net effect of any payments made on the current day
        NetEffect: int64<Cent>
        /// the payment status based on the payments made on the current day
        PaymentStatus: CustomerPaymentStatus voption
    }

    /// groups payments by day, applying actual payments, adding a payment status and optionally a late payment charge if underpaid
    let applyPayments asOfDay intendedPurpose (latePaymentGracePeriod: int<DurationDay>) (latePaymentCharge: Amount voption) (generatedPayment: CustomerPayment voption) actualPayments scheduledPayments =
        if Array.isEmpty scheduledPayments then [||] else
        let nonZero = Array.filter(fun cp -> CustomerPaymentDetails.total cp.PaymentDetails <> 0L<Cent>)
        let generatedPayments = match generatedPayment with ValueSome { PaymentDetails = cpd } when CustomerPaymentDetails.total cpd <> 0L<Cent> -> [| generatedPayment.Value |] | _ -> [||]
        [| scheduledPayments; nonZero actualPayments; generatedPayments |]
        |> Array.concat
        |> Array.groupBy _.PaymentDay
        |> Array.map(fun (offsetDay, payments) ->
            let scheduledPayment' = payments |> Array.map(fun p -> p.PaymentDetails |> function ScheduledPayment sp -> sp | _ -> 0L<Cent>) |> Array.sum

            let actualPayments' = payments |> Array.choose(fun p -> p.PaymentDetails |> function ActualPayment (ap, _) -> Some ap | _ -> None)
            let actualPaymentsTotal = actualPayments' |> Array.sum

            let generatedPayment' = payments |> Array.tryPick(fun p -> p.PaymentDetails |> function GeneratedPayment (gp, gpt) -> Some (gp, gpt) | _ -> None)
            let generatedPaymentTotal = generatedPayment' |> Option.map fst |> Option.defaultValue 0L<Cent>

            let netEffect, paymentStatus =
                if generatedPayment'.IsSome then
                    actualPaymentsTotal + generatedPaymentTotal, (generatedPayment'.Value |> snd |> Generated |> ValueSome)
                else
                    match scheduledPayment', Array.sum actualPayments' + generatedPaymentTotal with
                    | 0L<Cent>, 0L<Cent> -> 0L<Cent>, ValueNone
                    | 0L<Cent>, ap when ap < 0L<Cent> -> ap, ValueSome Refunded
                    | 0L<Cent>, ap -> ap, ValueSome ExtraPayment
                    | sp, ap when ap < sp && (offsetDay <= asOfDay) && (int offsetDay + int latePaymentGracePeriod >= int asOfDay) ->
                        (match intendedPurpose with IntendedPurpose.Quote -> 0L<Cent> | IntendedPurpose.Statement -> sp), ValueSome PaymentDue
                    | sp, _ when offsetDay > asOfDay -> sp, ValueSome NotYetDue
                    | _, 0L<Cent> -> 0L<Cent>, ValueSome MissedPayment
                    | sp, ap when ap < sp -> ap, ValueSome Underpayment
                    | sp, ap when ap > sp -> ap, ValueSome Overpayment
                    | _, ap -> ap, ValueSome PaymentMade

            let charges =
                payments
                |> Array.collect(fun p -> p.PaymentDetails |> function ActualPayment (_, c) -> c | _ -> [||])
                |> fun pcc ->
                    if latePaymentCharge.IsSome then
                        pcc |> Array.append(match paymentStatus with ValueSome MissedPayment | ValueSome Underpayment -> [| Charge.LatePayment latePaymentCharge.Value |] | _ -> [||])
                    else pcc

            { AppliedPaymentDay = offsetDay; ScheduledPayment = scheduledPayment'; ActualPayments = actualPayments'; GeneratedPayment = generatedPaymentTotal; IncurredCharges = charges; NetEffect = netEffect; PaymentStatus = paymentStatus }
        )
        |> Array.sortBy _.AppliedPaymentDay
